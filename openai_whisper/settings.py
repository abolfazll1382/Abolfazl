"""
Django settings for weblog project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'your_secret_key'

# settings.py
import os
import logging
import warnings
import torch
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# Basic settings
DEBUG = True
ALLOWED_HOSTS = ['*']

# Suppress noisy loggers
logging.getLogger('django.server').setLevel(logging.WARNING)
logging.getLogger('kombu.transport.base').setLevel(logging.ERROR)
logging.getLogger('amqp').setLevel(logging.ERROR)

# Installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'voice_to_text.apps.VoiceToTextConfig', # app_name
    'django_celery_results',
    'rest_framework',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'whisper_project.urls' # your_project_name

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'whisper_project' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'whisper_project.wsgi.application' # your_project_name

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Static and Media
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Whisper and transcription settings
WHISPER_SETTINGS = {
    'SUPPORTED_MIME_TYPES': {
        'audio/wav': '.wav',
        'audio/mpeg': '.mp3',
        'audio/mp4': '.m4a',
        'audio/webm': '.webm',
    },
    'MAX_DIRECT_PROCESS_SIZE': 300 * 1024 * 1024,  # 300 MB
    'language': 'fa',
    'model_config': {
        'model_size': 'large-v2',
        'device': 'cpu',
        'compute_type': 'float32'
    },
    'model_cache_timeout': 3600,
    'load_on_startup': True,
}
WHISPER_CPU_THREADS = 2  # For torch.set_num_threads

# Celery config
CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
broker_transport_options = {
    'heartbeat': 60,       # Keep connection alive
    'retry_policy': {'interval_start': 0, 'interval_step': 1, 'interval_max': 5},
}

CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_BACKEND_ALIASES = {
    'django-db': {
        'backend': 'django_celery_results.backends.database:DatabaseBackend'
    }
}
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_ACKS_LATE = False
CELERY_TASK_ACKS_LATE = False
CELERY_TASK_REJECT_ON_WORKER_LOST = False
CELERY_WORKER_CANCEL_LONG_RUNNING_TASKS_ON_CONNECTION_LOSS = True
CELERYD_TASK_SOFT_TIME_LIMIT = 3600
CELERY_TASK_TIME_LIMIT = 3660


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'your_app_name.log',
        },
        'console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'your_app_name': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'kombu.transport.base': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'amqp': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'celery.app.trace': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'celery.worker.strategy': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'billiard': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}


# Warnings
warnings.filterwarnings("ignore", category=UserWarning, message="FP16 is not supported.*")
warnings.filterwarnings("ignore", category=UserWarning, message="Performing inference on CPU.*")
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

# Folder creation
TEMP_FILE_DIR = BASE_DIR / 'media' / 'whisper_temp'

os.makedirs(BASE_DIR / 'logs', exist_ok=True)
os.makedirs(TEMP_FILE_DIR, exist_ok=True)
os.makedirs(BASE_DIR / 'temp_uploads', exist_ok=True)